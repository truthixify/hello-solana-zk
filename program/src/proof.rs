use ark_bn254::{Bn254, Fq, Fq2, G1Affine, G2Affine};
use ark_groth16::Proof;
use ark_std::str::FromStr;

pub fn get_proof_from_json() -> Proof<Bn254> {
    let a = G1Affine::new(
        Fq::from_str(
            "13014125459706506042452264006539706398458540997821800191648869548628618789852",
        )
        .unwrap(),
        Fq::from_str(
            "7763333620157416124908986370271450531244353301821531511607440027576138371763",
        )
        .unwrap(),
    );
    let b = G2Affine::new(
        Fq2::new(
            Fq::from_str(
                "15995708536150312084585526045073219915927098604358388487588317212742663119610",
            )
            .unwrap(),
            Fq::from_str(
                "17272257674043024477310782993729466955104395555990620341418772958985455733795",
            )
            .unwrap(),
        ),
        Fq2::new(
            Fq::from_str(
                "14336918093976701719832409790334425687647355012436609829312377399941627898152",
            )
            .unwrap(),
            Fq::from_str(
                "15712337739959789813687532665830846902579301851598352954969534653112766574157",
            )
            .unwrap(),
        ),
    );
    let c = G1Affine::new(
        Fq::from_str(
            "1248205349626869776834198497533912734311331969503244542214049560958886060542",
        )
        .unwrap(),
        Fq::from_str(
            "17602799863663205058124316778940766675468915704516870632320085560201088267743",
        )
        .unwrap(),
    );

    Proof { a, b, c }
}
